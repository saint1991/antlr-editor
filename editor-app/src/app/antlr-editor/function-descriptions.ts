import type { FunctionDescription } from './extensions/function';

export const functionDescriptions: Record<string, FunctionDescription> = {
  UPPER: {
    name: 'UPPER',
    description: 'Converts text to uppercase letters.',
    syntax: 'UPPER(text)',
    examples: ['UPPER("hello") → "HELLO"', 'UPPER([column_name]) → uppercase column value'],
    type: 'function',
    detail: '(text) → text',
    info: 'Converts text to uppercase.\nExample: UPPER("hello") → "HELLO"',
  },
  LOWER: {
    name: 'LOWER',
    description: 'Converts text to lowercase letters.',
    syntax: 'LOWER(text)',
    examples: ['LOWER("HELLO") → "hello"', 'LOWER([column_name]) → lowercase column value'],
    type: 'function',
    detail: '(text) → text',
    info: 'Converts text to lowercase.\nExample: LOWER("HELLO") → "hello"',
  },
  TRIM: {
    name: 'TRIM',
    description: 'Removes leading and trailing whitespace from text.',
    syntax: 'TRIM(text)',
    examples: ['TRIM("  hello  ") → "hello"', 'TRIM([column_name]) → trimmed column value'],
    type: 'function',
    detail: '(text) → text',
    info: 'Removes leading and trailing whitespace.\nExample: TRIM("  hello  ") → "hello"',
  },
  LENGTH: {
    name: 'LENGTH',
    description: 'Returns the length of a string or the number of elements in a collection.',
    syntax: 'LENGTH(text)',
    examples: ['LENGTH("hello") → 5', 'LENGTH([column_name]) → length of column value'],
    type: 'function',
    detail: '(text) → number',
    info: 'Returns the length of a string.\nExample: LENGTH("hello") → 5',
  },
  LEN: {
    name: 'LEN',
    description: 'Returns the length of a string.',
    syntax: 'LEN(text)',
    examples: ['LEN("hello") → 5', 'LEN([text_column]) → length of text column value'],
    type: 'function',
    detail: '(text) → number',
    info: 'Returns the length of a string.\nExample: LEN("hello") → 5',
  },
  CONCAT: {
    name: 'CONCAT',
    description: 'Concatenates multiple text values into a single string.',
    syntax: 'CONCAT(text1, text2, ...)',
    examples: ['CONCAT("Hello", " ", "World") → "Hello World"', 'CONCAT([first_name], " ", [last_name])'],
    type: 'function',
    detail: '(text1, text2, ...) → text',
    info: 'Concatenates multiple strings.\nExample: CONCAT("hello", " ", "world") → "hello world"',
  },
  SUBSTRING: {
    name: 'SUBSTRING',
    description: 'Extracts a substring from text.',
    syntax: 'SUBSTRING(text, start, length)',
    examples: ['SUBSTRING("hello", 2, 3) → "llo"', 'SUBSTRING([text], 1, 5) → first 5 characters'],
    type: 'function',
    detail: '(text, start, length) → text',
    info: 'Extracts a substring.\nExample: SUBSTRING("hello", 2, 3) → "llo"',
  },
  REPLACE: {
    name: 'REPLACE',
    description: 'Replaces occurrences of a search string with a replacement string.',
    syntax: 'REPLACE(text, search, replace)',
    examples: ['REPLACE("hello", "l", "r") → "herro"', 'REPLACE([text], "old", "new") → text with replacements'],
    type: 'function',
    detail: '(text, search, replace) → text',
    info: 'Replaces occurrences of search with replace.\nExample: REPLACE("hello", "l", "r") → "herro"',
  },
  IF: {
    name: 'IF',
    description: 'Returns one value if a condition is true and another value if it is false.',
    syntax: 'IF(condition, true_value, false_value)',
    examples: ['IF([score] > 80, "Pass", "Fail")', 'IF(LENGTH([name]) > 0, [name], "Unknown")'],
    type: 'function',
    detail: '(condition, true_value, false_value) → any',
    info: 'Conditional expression.\nExample: IF([age] > 18, "adult", "minor")',
  },
  CASE: {
    name: 'CASE',
    description: 'Multi-condition expression that returns different values based on conditions.',
    syntax: 'CASE WHEN condition THEN value ... END',
    examples: ['CASE WHEN [score] > 90 THEN "A" WHEN [score] > 80 THEN "B" ELSE "C" END'],
    type: 'function',
    detail: 'CASE WHEN condition THEN value ... END',
    info: 'Multi-condition expression.\nExample: CASE WHEN [score] > 90 THEN "A" WHEN [score] > 80 THEN "B" ELSE "C" END',
  },
  COALESCE: {
    name: 'COALESCE',
    description: 'Returns the first non-null value from the provided arguments.',
    syntax: 'COALESCE(value1, value2, ...)',
    examples: ['COALESCE([field1], [field2], "default") → first non-null value'],
    type: 'function',
    detail: '(value1, value2, ...) → any',
    info: 'Returns the first non-null value.\nExample: COALESCE([field1], [field2], "default")',
  },
  ROUND: {
    name: 'ROUND',
    description: 'Rounds a number to a specified number of decimal places.',
    syntax: 'ROUND(number, decimals)',
    examples: ['ROUND(3.14159, 2) → 3.14', 'ROUND([price], 0) → rounded to nearest integer'],
    type: 'function',
    detail: '(number, decimals?) → number',
    info: 'Rounds a number to specified decimals.\nExample: ROUND(3.14159, 2) → 3.14',
  },
  FLOOR: {
    name: 'FLOOR',
    description: 'Rounds down to the nearest integer.',
    syntax: 'FLOOR(number)',
    examples: ['FLOOR(3.7) → 3', 'FLOOR([value]) → rounded down value'],
    type: 'function',
    detail: '(number) → number',
    info: 'Rounds down to the nearest integer.\nExample: FLOOR(3.7) → 3',
  },
  CEIL: {
    name: 'CEIL',
    description: 'Rounds up to the nearest integer.',
    syntax: 'CEIL(number)',
    examples: ['CEIL(3.2) → 4', 'CEIL([value]) → rounded up value'],
    type: 'function',
    detail: '(number) → number',
    info: 'Rounds up to the nearest integer.\nExample: CEIL(3.2) → 4',
  },
  ABS: {
    name: 'ABS',
    description: 'Returns the absolute (positive) value of a number.',
    syntax: 'ABS(number)',
    examples: ['ABS(-5) → 5', 'ABS([column_name]) → absolute value of column'],
    type: 'function',
    detail: '(number) → number',
    info: 'Returns the absolute value.\nExample: ABS(-5) → 5',
  },
  MIN: {
    name: 'MIN',
    description: 'Returns the minimum value among the provided arguments.',
    syntax: 'MIN(value1, value2, ...)',
    examples: ['MIN(10, 20, 5) → 5', 'MIN([column1], [column2]) → minimum of two columns'],
    type: 'function',
    detail: '(value1, value2, ...) → any',
    info: 'Returns the minimum value.\nExample: MIN(1, 2, 3) → 1',
  },
  MAX: {
    name: 'MAX',
    description: 'Returns the maximum value among the provided arguments.',
    syntax: 'MAX(value1, value2, ...)',
    examples: ['MAX(10, 20, 5) → 20', 'MAX([column1], [column2]) → maximum of two columns'],
    type: 'function',
    detail: '(value1, value2, ...) → any',
    info: 'Returns the maximum value.\nExample: MAX(1, 2, 3) → 3',
  },
  SUM: {
    name: 'SUM',
    description: 'Returns the sum of all provided arguments.',
    syntax: 'SUM(value1, value2, ...)',
    examples: ['SUM(10, 20, 30) → 60', 'SUM([column1], [column2]) → sum of two columns'],
    type: 'function',
    detail: '(number1, number2, ...) → number',
    info: 'Returns the sum of values.\nExample: SUM(1, 2, 3) → 6',
  },
  AVG: {
    name: 'AVG',
    description: 'Returns the average of the provided numeric values.',
    syntax: 'AVG(number1, number2, ...)',
    examples: ['AVG(1, 2, 3) → 2', 'AVG([column1], [column2]) → average of two columns'],
    type: 'function',
    detail: '(number1, number2, ...) → number',
    info: 'Returns the average of values.\nExample: AVG(1, 2, 3) → 2',
  },
  COUNT: {
    name: 'COUNT',
    description: 'Counts the number of non-null values.',
    syntax: 'COUNT(value1, value2, ...)',
    examples: ['COUNT([field1], [field2]) → count of non-null values'],
    type: 'function',
    detail: '(value1, value2, ...) → number',
    info: 'Counts non-null values.\nExample: COUNT([field1], [field2])',
  },
  NOW: {
    name: 'NOW',
    description: 'Returns the current date and time.',
    syntax: 'NOW()',
    examples: ['NOW() → current timestamp'],
    type: 'function',
    detail: '() → datetime',
    info: 'Returns the current date and time.\nExample: NOW()',
  },
  DATE: {
    name: 'DATE',
    description: 'Extracts the date part from a datetime value.',
    syntax: 'DATE(datetime)',
    examples: ['DATE(NOW()) → current date', 'DATE([timestamp]) → date part only'],
    type: 'function',
    detail: '(datetime) → date',
    info: 'Extracts the date part.\nExample: DATE(NOW())',
  },
  YEAR: {
    name: 'YEAR',
    description: 'Extracts the year from a datetime value.',
    syntax: 'YEAR(datetime)',
    examples: ['YEAR(NOW()) → 2024', 'YEAR([date_column]) → year value'],
    type: 'function',
    detail: '(datetime) → number',
    info: 'Extracts the year.\nExample: YEAR(NOW()) → 2024',
  },
  MONTH: {
    name: 'MONTH',
    description: 'Extracts the month (1-12) from a datetime value.',
    syntax: 'MONTH(datetime)',
    examples: ['MONTH(NOW()) → current month', 'MONTH([date_column]) → month value'],
    type: 'function',
    detail: '(datetime) → number',
    info: 'Extracts the month (1-12).\nExample: MONTH(NOW())',
  },
  DAY: {
    name: 'DAY',
    description: 'Extracts the day of month from a datetime value.',
    syntax: 'DAY(datetime)',
    examples: ['DAY(NOW()) → current day', 'DAY([date_column]) → day value'],
    type: 'function',
    detail: '(datetime) → number',
    info: 'Extracts the day of month.\nExample: DAY(NOW())',
  },
  TRUE: {
    name: 'TRUE',
    description: 'Boolean true value',
    syntax: 'true',
    type: 'constant',
    detail: 'boolean',
    info: 'Boolean true value',
  },
  FALSE: {
    name: 'FALSE',
    description: 'Boolean false value',
    syntax: 'false',
    type: 'constant',
    detail: 'boolean',
    info: 'Boolean false value',
  },
  AND: {
    name: 'AND',
    description: 'Logical AND operator',
    syntax: 'condition1 AND condition2',
    type: 'keyword',
    detail: 'logical operator',
    info: 'Logical AND operator',
  },
  OR: {
    name: 'OR',
    description: 'Logical OR operator',
    syntax: 'condition1 OR condition2',
    type: 'keyword',
    detail: 'logical operator',
    info: 'Logical OR operator',
  },
};
