name: Analyzer WASM CI

on:
  push:
    branches: [ main ]
    paths:
      - 'analyzer/**'
      - 'grammar/**'
      - '.github/workflows/analyzer-ci.yml'
  pull_request:
    branches: [ '*', '!hotfix/**' ]
    paths:
      - 'analyzer/**'
      - 'grammar/**'
      - '.github/workflows/analyzer-ci.yml'

jobs:
  test-wasm:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: analyzer
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
    
    - name: Install chrome
      uses: browser-actions/setup-chrome@v2
      with:
        chrome-version: stable
    
    - name: Install wasmbrowsertest
      run: go install github.com/agnivade/wasmbrowsertest@latest

    - name: Setup wasmexec
      run: mv $(go env GOPATH)/bin/wasmbrowsertest $(go env GOPATH)/bin/go_js_wasm_exec
    
    - name: Install xvfb for headless testing
      run: sudo apt-get update && sudo apt-get install -y xvfb

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Generate ANTLR parser
      run: ./codegen.sh

    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
        sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
        rm tinygo_${TINYGO_VERSION}_amd64.deb
      env:
        TINYGO_VERSION: '0.38.0'
        
    - name: Install wasm-opt
      run: sudo apt-get update && sudo apt-get install -y binaryen

    - name: Build WASM with Go
      run: go build ./wasm/analyzer.go
      env:
        GOOS: js
        GOARCH: wasm

    - name: Build WASM with TinyGo
      run: tinygo build -o analyzer-tinygo.wasm -target wasm ./wasm/analyzer.go

    - name: Optimize WASM binaries
      run: |
        wasm-opt -O3 -o analyzer-go-optimized.wasm analyzer.wasm
        wasm-opt -Oz --strip-debug -o analyzer-optimized.wasm analyzer-tinygo.wasm
        
    - name: Compare WASM sizes
      run: |
        echo "WASM Binary Sizes:"
        ls -lh *.wasm | awk '{print $5 "\t" $9}'
        echo ""
        echo "Size comparison (Go vs TinyGo):"
        GO_SIZE=$(stat -c%s analyzer.wasm)
        TINYGO_SIZE=$(stat -c%s analyzer-tinygo.wasm)
        OPTIMIZED_SIZE=$(stat -c%s analyzer-optimized.wasm)
        echo "Standard Go: $GO_SIZE bytes"
        echo "TinyGo: $TINYGO_SIZE bytes"
        echo "TinyGo + wasm-opt: $OPTIMIZED_SIZE bytes"
        REDUCTION=$(( (GO_SIZE - OPTIMIZED_SIZE) * 100 / GO_SIZE ))
        echo "Size reduction: $REDUCTION%"

    - name: Test WASM
      run: go test ./wasm/...
      env:
        GOOS: js
        GOARCH: wasm
